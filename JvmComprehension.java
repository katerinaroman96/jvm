package com.jvm;

/*1. Сначала происходит вызов загрузки класса JvmComprehension.
Он ищется в кэше загруженных классов каждого загрузчика
(снизу вверх от системного загрузчика до базового, если не нашелся у текущего, переходит к родительскому).
Если в базовом загрузчике нет информации об этом классе, то он ищет класс по расположению классов, известному данному загрузчику,
и, если не находит, делегирует поиск своему загрузчику-потомку. И так до системного загрузчика, если класс не нашелся ранее.
Он, системный загрузчик, в нашем случае и находит класс JvmComprehension.
Далее происходит загрузка класса в JVM и получение экземпляра класса.
2. Вся информация о классе загружается в Metaspace.*/

public class JvmComprehension {
    public static void main(String[] args) { // В момент вызова метода main создается фрейм в стеке.
        int i = 1;                      // 1 - В него помещается локальная переменная i.
        Object o = new Object();        // 2 - Далее в куче создается объект Object,
                                        // а в стеке в том же первом фрейме ссылочная переменная (ссылка на объект) o.
        Integer ii = 2;                 // 3 - Объект типа Integer лежит в куче, а ссылка на него в виде переменной ii -  в стеке.
        printAll(o, i, ii);             // 4 - При вызове метода printAll (// 4) создается новый фрейм
                                        // (над первым, так как он же потом первым удалится по принципу LIFO).
        System.out.println("finished"); // 7 - При вызове метода println объекта out класса System создается новый фрейм в стеке (// 7).
                                        // После выполнения первый фрейм уничтожается (строка 13)?
    }

    private static void printAll(Object o, int i, Integer ii) { // В новом фрейме создаются новые переменные o, i, ii,
                                                                // из которых переменные o и ii хранят ссылки
                                                                // на те же самые объекты в куче Object и Integer,
                                                                // а i - просто локальная переменная в стеке.
        Integer uselessVar = 700;                   // 5 - Далее создается в куче новый объект Integer
                                                    // и в стеке переменная uselessVar, хранящая ссылку на объект в куче.
        System.out.println(o.toString() + i + ii);  // 6 - При вызове метода println объекта out класса System создается
                                                    // новый фрейм в стеке.
                                                    // После выполнения 6 строки последний фрейм с методом println уничтожается,
                                                    // далее уничтожается фрейм с методом printAll.
        
    // Данные, хранящиеся в куче, уничтожается сборщиком муссора в соответствие с возрастом объекта.
    }
}
